<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>
<!-- 	<bean id="dataSourceSpied" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean> 
	<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
   		<constructor-arg ref="dataSourceSpied"></constructor-arg>
    </bean>
-->	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	        <!-- 基本属性 url、user、password -->
	        <property name="url" value="${jdbc.url}"/>
	        <property name="username" value="${jdbc.username}"/>
	        <property name="password" value="${jdbc.password}"/>
	
	        <!-- 配置初始化大小、最小、最大 -->
	        <!-- 配置初始化大小、最小、最大 -->
	        <property name="initialSize" value="${druid.initialSize:2}"/>
	        <property name="minIdle" value="${druid.minIdle:2}"/>
	        <property name="maxActive" value="${druid.maxActive:50}"/>
	
	        <!-- 配置获取连接等待超时的时间 -->
	        <property name="maxWait" value="${druid.maxWait:60000}"/>
	        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis:60000}" />
	
	        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis:30000}" />
	
	        <property name="validationQuery" value="${druid.validationQuery:select 'x'}" />
	        <property name="testWhileIdle" value="${druid.testWhileIdle:true}" />
	        <property name="testOnBorrow" value="${druid.testOnBorrow:false}" />
	        <property name="testOnReturn" value="${druid.testOnReturn:false}" />
	
	        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
	        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements:false}" />
	        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize:20}" />
	
	        <!-- 配置监控统计拦截的filters -->
	        <property name="filters" value="${druid.filters:stat,slf4j,wall,mergeStat}" />
	</bean>
   
	<!-- spring jdbc -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
         <constructor-arg ref="dataSource"></constructor-arg>
     </bean>
     
	<!-- 事务控制 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 开启事务注解驱动 -->
	<tx:annotation-driven/>
	
	<!--  orm  分页 -->
	<bean name="pageSqlHelper" class="com.mainbo.jy.common.page.MysqlPageSqlHelper"></bean>
	
	<!--  orm  sql 映射 -->
	<bean name="sqlMapping" class="com.mainbo.jy.common.orm.DefaultSqlMapping"></bean>
	
	<!--orm bo 映射扫描  -->
	<bean class="com.mainbo.jy.common.orm.MapperScannerConfig">
		<property name="basePackage" value="com/mainbo/jy/**/bo" />
	</bean>
	
	<bean id="msgThreadPool"  
        class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
        <property name="corePoolSize" value="5" /><!--最小线程数 -->  
        <property name="maxPoolSize" value="10" /><!--最大线程数 -->  
        <property name="queueCapacity" value="50" /><!--缓冲队列大小 -->  
        <property name="threadNamePrefix" value="msg-" /><!--线程池中产生的线程名字前缀 -->  
        <property name="keepAliveSeconds" value="30" /><!--线程池中空闲线程的存活时间单位秒 -->  
    </bean>

  <bean id="flywayDbInit" class="org.flywaydb.core.Flyway" init-method="migrate" lazy-init="false">
	 <property name="dataSource" > <!--数据源-->
	    <bean class="com.mysql.jdbc.jdbc2.optional.MysqlDataSource">
	       <property name="Url" value="${jdbc.url}"></property>
         <property name="user" value="${jdbc.username}"></property>
         <property name="password" value="${jdbc.password}"></property>
	    </bean>
	  </property>
	  <property name="locations" value="dbmigrate"/> <!--脚本文件夹地址 默认src/db/migration-->
	  <property name="validateOnMigrate" value="false"/> <!--迁移验证 默认true-->
	  <property name="baselineOnMigrate" value="true"/> <!--基线迁移 默认false-->
	  <property name="placeholderPrefix" value="ignore"/> <!--占位符前缀-->
	  <property name="baselineVersionAsString" value="0"></property>
	  <property name="outOfOrder" value="false"/> 
	</bean>
    
    <!-- 获取bean工具注入 -->
	<bean id="springContextHolder" class="com.mainbo.jy.utils.SpringContextHolder" lazy-init="false"/>
    
    <bean id="phaseMetaProvider" class="com.mainbo.jy.manage.meta.DefaultMetaProvider.DefaultPhaseMetaProvider"></bean>
    <bean id="phaseSubjectMetaProvider" class="com.mainbo.jy.manage.meta.DefaultMetaProvider.DefaultPhaseSubjectMetaProvider"></bean>
    <bean id="phaseGradeMetaProvider" class="com.mainbo.jy.manage.meta.DefaultMetaProvider.DefaultPhaseGradeMetaProvider"></bean>
    <bean id="orgTypeMetaProvider" class="com.mainbo.jy.manage.meta.DefaultMetaProvider.DefaultOrgTypeMetaProvider"></bean>
</beans>
	